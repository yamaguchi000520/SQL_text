RDBの基本構造
・RDBには複数の票が入っており、ここの表をtableという
・個々のtableには名前があり、そこから参照できる
・」tableは行(row)と列(column)で構成されている
・１つの行が１っ県のデータに対応し、列はそのデータの要素に対応する

データベース管理システム(DBMS)
データベース内のデータを操作するにはSQL文による命令が必要である

代表的なRDBMS
商品製品  Oracle Database オラクル社
          Db2             IBM社
          SQL Server      マイクロソフト社

OSS       MySQL           オラクル社
          MariaDB         MariaDB Corporation
          PostgreSQL      PostgreSQL Gllobal Development Group
          SQLite          D.Richard Hipp
          H2 Database     Thomas Mueller

・データベースの概要
データベースとは管理や分析を目的として様々なデータを蓄積したものを指す
ITにおけるデータベースの実体は、通常、ファイルである。
データベースはデータベース管理システム（DBMS）によって管理される
現在、様々なDBMSがソフトウェア製品として公開されている
複数のテーブルの形式でデータを管理するものをリレーショナルデータベースという
１つの行が１件のデータ、１つの列が１要素に対応している

・SQLの概要
SQLは、データベースやデータを操作するための専門用語である。
SQLで書かれた命令文をDBMSに送信することで、データの検索・追加・更新・削除などを行うことができる
SQLを送信するにはDBMS製品が提供するドライバを用いたプログラムを新しく開発するか、DBMS製品に付属するソフトウェアを利用する
SQLの文法は利用するDBMS製品によって少しずつ異なるが、基本的な部分は同じである。

・SQLの基本ルール
文の途中に改行を入れることができる
行の先頭や行の都流に半角の空白を入れることができる
「；」を命令の最後に入れることで一つの命令文が完結する
ハイフン２つ(--)から行末まではコメントとして扱われる
/*   */の間はコメントとして扱われる
SELECTやWHEREなどの命令に使う単語は、SWLとして特別な意味を持「予約語」である
予約語は、大文字と小文字のどちらで記述しても良い
テーブル名や列名に予約語を利用することはできない

・リテラルの記述に関するルール
「'」で括らずに記述されたリテラルは、数値情報として扱われる
「'」で括られたリテラルは、基本的に文字列情報として扱われる
「'」でくくられ、2022-02-25'のような一定の形式で記述されたリテラルは、日付情報として扱われる

・代表的なデータ型
---------------------------------------------------------------------------
データの種類｜区分        |代表的なデータ型
------------｜------------|------------------------------------------------
数値        ｜整数        |INTEGER型、INT型
            ｜------------|------------------------------------------------
            ｜少数        |DECIMAL型、NUMERIC型、FLOAT型、DOUBLE型、REAL型
------------｜------------|------------------------------------------------
文字列      ｜固定長      |CHAR型
            ｜------------|------------------------------------------------
            ｜可変長      |VARCHAR型
------------｜------------|------------------------------------------------
日付と時刻  ｜ー          |TIMESTAMP型、DATETIME型、DATE型、TIME型
------------｜------------|------------------------------------------------

・データ型
テーブルの各列には、データ型が指定されている
列には、データ型で指定された種類の情報しか格納することができない
利用可能なデータ型は、DBMS製品によって異なる

・４大命令
----------------------------------------------------------|----------------
命令        ｜各命令の固有の部分         |対象業の絞り込み|検索結果の加工
------------｜---------------------------|----------------|----------------
SELECT      ｜列名：FROMテーブル名       |                |その他の修飾
------------｜---------------------------|                |----------------
UPDATE      ｜テーブル名SET列名＝値      |  WHERE         | ー
------------｜---------------------------|                |----------------
DELETE      ｜FROMテーブル名|VARCHAR型   |                | ー
------------｜---------------------------|----------------|----------------
INSERT      ｜INTOテーブル名（列名）     |  ー            | ー
            ｜VALUES(値)                 |                |
------------｜---------------------------|----------------|----------------

◆SELECT文の基本構文
                  --SELECT :取得しなさい
SELECT 列名...    --この列名のデータを
FROM データ名     --このテーブルから
(その他修飾)

・ASによる別名の定義
ASを用いて別名を定義できる,メリットとしては長い名を短くできる
例)
SELECT 費目 AS ITEM, 入金額 AS RECEIVE, 出金額 AS PAY
FROM 家計簿 AS MONEYBOOK
WHERE 費目 = '給料';

※SELECT * FROM~ の乱用は注意
*(アスタリスク)による前列検索は便利ですが、データベースの設計変更などで列が増えたり減ったりすると、検索結果も変化してしまう
そのため、データベースを検索するアプリケーションプログラムでこの記述をしていた場合、予期しないバグの原因になることもある。

◆UPDATE文の基本構文
                                  --UPDATE :更新しなさい
UPDATE テーブル                   --このテーブルの情報を
SET 列名1 = 値1, 列名2 = 値2...   --列名1 :この列を
                                  --値    :このデータで

・条件付きのUPDATE分
UPDATE 家計簿
SET 入金額 = 999999
WHERE 日付 = '2022-12-24';

※WHEREのないUPDATE文は全てを更新してしまう


◆DELETE文の基本構文

DELETE            --UPDATE :更新しなさい
FROM テーブル名   --このテーブルの情報を
WHERE

※WHEREのないWHERE文は全てを削除してしまう


・INSERT文の基本構文
INSERT INTO テーブル名                      --INSERT INTO : 追加しなさい, このテーブルに
            (列名１, 列名２, 列名３, ...)   --この列に
VALUES (値1, 値２, 値３, ...)               --このデータを

・４大命令を学ぶコツ
４大命令の構造と修飾語の全体像をしっかり把握する
４大命令の２通りの分類方法を理解する
４大命令に共通するテーブル指定を先に書く

・４大命令の分類方法(1)　検索系と更新系
検索系：SELECT
更新系：UPDATE, DELETE, INSERT

・４大命令の分類方法(2) 既存系と新規系
既存系：SELECT, UPDATE, DELETE
新規系：INSERT

・４大命令の全てに共通すること
処理対象とするテーブル名を必ず指定する必要がある


・スッキルかけるSQL
1. まず、命令（SELECT, UPDATE, DELETE, INSERT）を記述する
2. 次に、テーブル指定の部分を記述する
3. テーブル指定より後ろの部分を記述する
4. テーブル指定より前の部分を記述する(SELECT文のみ)



・WHERE句の基本
1. 処理対象行の絞り込みに用いる
    →WHEREを指定しないと「すべての行」が処理対象になる
2. SELECT, UPDATE, DELETE分で使用可能
    →新しい行を追加するINSERT分では使用できない
3. WHEREの後ろには条件式を記述する
    →絞り込み条件に沿った「正しい条件式」を記述する

・条件式においての真偽
WHEREくを含むSQL文を受け取ったDBMSはテーブル中の全ての行について条件式が真になる鍵になるかをそれぞれ調べる。
しんになった行についてのみ、SELECTやUPDATE, DELETEなどの処理を行う

・様々な演算子
=や<, >はtrueおよびFalseで評価する
=   左右の値が等しい
<   左辺は右辺より小さい
>   左辺は右辺より大きい
<=  左辺は右辺の値以下
>=  左辺は右辺の値以上
<>  左右の値が等しくない

・NULLの判定
どのような値も格納されていない状態

・NULLとは
そこに何も値が格納されていない状態を意味する、特別なもの
数値のゼロや空白文字、長さ0の文字列とも異なる存在である
格納データが「不明」や「無意味」である状況を示す意図で用いられる

・NULLの判定
NULLであることを判定する　→ IS NULL
NULLでないことを判定する　→ IS NOT NULL
NULLは＝で判定できない

・LIKE演算子
文字列があるパターンに合致しているかチェックすること「パターンマッチング」

・LIKE演算子によるパターンマッチング
式　LIKE パターン文字列
例）　WHERE メモ　LIKE '%1月%'　 --「１月」の前後に任意の0文字以上の文字列がついても良い
% :任意の0文字以上
_ :任意の1文字

％や_を含む文字列をLIKEで探したい. =>　ESCAPE句を併用した記述を行います
例) SELECT * FROM 家計簿 WHERE メモ LIKE '%100$%' ESCAPE '$'
$はエスケープ文字として扱われ、この文字に続く%や_は文字として扱われる

・BETWEEN演算子
ある範囲内に値が収まっているかを判定します。
式　BETWEEN 値１　AND 値２    --値１　から　値２　までの間の数値

・IN/NOT IN 演算子
IN演算子はカッコ内に列挙した複数の値（値リスト）のいずれかにデータが合致するか判定する演算子
式　IN (値1, 値2, 値3, ...)
例）  WHERE 費目 IN ('食費', '交際費')

・ANY／ALL演算子
複数の値と「大小」を比較したい場合に使用

・AND演算子とOR演算子
２つの条件式の両方が真の場合だけ、真となる（A かつB）
条件式１　AND 条件式２
２つの条件式のどちらかが真ならば、真となる（AまたはB）
条件式１ OR 条件式２

・NOT演算子による真偽値の逆転
NOT　条件式

・論理演算子の優先度
(1)NOT, (2)AND, (3)ORの優先順位に従って処理されていく
条件式１ OR 条件式2 AND 条件式3
                    ↓評価
                    条件式１ OR 結果
※（）かっこによる優先順位の引き上げもできる


◆主キーとその必要性
・思い通りに削除できない（重複する文の片方を削除したい）
・特定の行を識別する方法
主キー（自然キー(nutural key)）で指定して削除する

・主キーとなる列が持つべき特性
必ずなんらかのデータが格納される（NULLではない）
他の行と値が重複しない
一度決めた値は変化しない

・主キー(自然キー)列を作り出す

・複数の行で列を識別する
複数の列を１つの主キーとして扱うものを複合主キーと呼ぶ


◆検索結果の加工
SELECT分にだけ可能な修飾

・検索結果を加工する主なキーワード
DISTINCT        :検索結果から超副業を除外する
ORDER BY        :検索結果の順序を並べ替える
OFFSET - FETCH  :検索結果から件数を限定して取得する
UNION           :検索結果に他の検索結果を足し合わせる
EXCEPT          :検索結果から他の検索結果を差し引く
INTERSECT       :検索結果の他の検索結果で重複する部分を取得する

・重複行を除外する
SELECT DISTINCT 列名...
FROM テーブル名

・検索結果を並び替える
SELECT 列名... FROM テーブル名
ORDER BY 列名　並び順
例）日付を降順で並び替える
SELECT * FROM 家計簿
ORDER BY 日付 DESC
例）複数の行を降順で並び替える
SELECT * FROM 家計簿
ORDER BY 入金額 DESC, 出金額 DESC --入金額→出金額の順で並び変わる

・行数を限定して取得する
SELECT 列名... FROM テーブル名
ORDER BY 列名...
OFFSET 先頭から除外する行数 ROWS
FETC NEXT 取得行数 ROWS ONLY

・集合演算子
SELECT命令によって抽出した結果表を一つのデータ集合と捉え、その結果同士を足し合わせたり、共通部分を探したりできる。
また、和集合や差集合、積集合などがある。
和集合  :２つの検索結果を足し合わせたもの
差集合  :最初の検索結果から、次の検索結果を引いたもの
積集合  :２つの検索結果で重なるもの

・UNION（和集合）
SELECT 文１
UNION (ALL)
SELECT 文２

・EXCEPT／MINUS（差集合）
SELECT 文１
EXCEPT (ALL)
SELECT 文２

・INTERSECT（積集合）
SELECT 文１
INTERSECT (ALL)
SELECT 文２


◆式と関数
結果が真や偽にならない式を計算式と呼ぶ

・DBMSによる処理の原則
DBMSは、テーブル内の各行を１つづつ順番に処理していく
式の評価なども各行で行われる

・基本的な算術演算子

演算子      使い方          説明
+           数値+数値       数値同士で足し算
+           日付+数値       日付を指定日数だけ進める
-           数値-数値       数値同士で引き算
-           日付-数値       日付を指定日数だけ戻す
-           日付-日付       日付のの差の日数を得る
*           数値*数値       数値同士で掛け算
/           数値/数値       数値同士で割り算
||          文字列||文字列  文字列を連結する

・Case演算子の利用構文（1）
Case 評価する列や式 WHEN 値1 THEN 値1の時に返す値
                   (WHEN 値2 THEN 値2の時に返す値)...
                   (ELSE デフォルト値)
END











